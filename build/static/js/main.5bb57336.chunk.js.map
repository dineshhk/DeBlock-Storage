{"version":3,"sources":["serviceWorker.js","index.js","components/App.js","components/Navbar.js","components/logo.png","components/Main.js","components/helpers.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","Component","componentWillMount","loadWeb3","loadBlockchainData","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","DeStorage","networks","destorage","Contract","abi","address","methods","fileCount","call","filesCount","i","files","file","state","constructor","props","super","captureFile","event","preventDefault","target","reader","FileReader","readAsArrayBuffer","onloadend","this","buffer","Buffer","result","type","name","console","log","uploadFile","description","add","error","size","loading","hash","send","from","on","reload","e","bind","className","id","Navbar","src","logo","width","alt","style","paddingTop","paddingLeft","height","Identicon","toString","rel","href","substring","module","exports","Main","Card","border","margin","backgroundColor","Header","as","Body","Title","onSubmit","fileDescription","value","ref","input","placeholder","required","Text","onChange","Button","variant","Table","striped","bordered","hover","map","key","fileId","fileName","fileType","bytes","parseInt","Math","floor","round","pow","convertBytes","fileSize","moment","unix","uploadTime","format","uploader","fileHash"],"mappings":"wKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACC,EAAA,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC,gB,gk9FE3HbC,G,OADaC,EAAQ,IACdC,CAAW,CACtBC,KAAM,iBACNC,KAAM,KACNC,SAAU,WAGZ,MAAMd,UAAYe,YACVC,qBAAsB,IAAD,kIACnB,EAAKC,WADc,uBAEnB,EAAKC,qBAFc,6CAKrBD,WAAY,OAAD,wGACXvB,OAAOyB,SADI,uBAEbzB,OAAO0B,KAAO,IAAIC,IAAK3B,OAAOyB,UAFjB,SAGPzB,OAAOyB,SAASG,SAHT,6BAIJ5B,OAAO0B,KAChB1B,OAAO0B,KAAO,IAAIC,IAAK3B,OAAO0B,KAAKG,iBAEnC7B,OAAO8B,MACL,uEARW,6CAaXN,qBAAsB,IAAD,6IACnBE,EAAO1B,OAAO0B,KADK,SAGFA,EAAKK,IAAIC,cAHP,cAGnBC,EAHmB,OAIzB,EAAKC,SAAS,CAAEC,QAASF,EAAS,KAJT,SAMDP,EAAKK,IAAIK,IAAIC,QANZ,UAMnBC,EANmB,SAOnBC,EAAcC,EAAUC,SAASH,IAPd,wBAUjBI,EAAY,IAAIhB,EAAKK,IAAIY,SAC7BH,EAAUI,IACVL,EAAYM,SAEd,EAAKX,SAAS,CAAEQ,cAdO,UAgBEA,EAAUI,QAAQC,YAAYC,OAhBhC,QAgBjBC,EAhBiB,OAiBvB,EAAKf,SAAS,CAAEe,eAEPC,EAAID,EAnBU,aAmBEC,GAAK,GAnBP,kCAoBFR,EAAUI,QAAQK,MAAMD,GAAGF,OApBzB,QAoBfI,EApBe,OAqBrB,EAAKlB,SAAS,CACZiB,MAAO,IAAI,EAAKE,MAAMF,MAAOC,KAtBV,QAmBUF,IAnBV,gDA0BvBlD,OAAO8B,MAAM,wDA1BU,8CAwF3BwB,YAAYC,GACVC,MAAMD,GADW,KAzDnBE,YAAeC,IACbA,EAAMC,iBAEN,IAAMP,EAAOM,EAAME,OAAOT,MAAM,GAC1BU,EAAS,IAAI7D,OAAO8D,WAE1BD,EAAOE,kBAAkBX,GACzBS,EAAOG,UAAY,KACjBC,KAAK/B,SAAS,CACZgC,OAAQC,EAAON,EAAOO,QACtBC,KAAMjB,EAAKiB,KACXC,KAAMlB,EAAKkB,OAEbC,QAAQC,IAAI,SAAUP,KAAKZ,MAAMa,UA4ClB,KAxCnBO,WAAcC,IACZH,QAAQC,IAAI,8BAGZzD,EAAK4D,IAAIV,KAAKZ,MAAMa,OAAQ,CAACU,EAAOR,KAClCG,QAAQC,IAAI,cAAeJ,EAAOS,MAC9BD,EACFL,QAAQK,MAAMA,IAIhBX,KAAK/B,SAAS,CAAE4C,SAAS,IAED,KAApBb,KAAKZ,MAAMgB,MACbJ,KAAK/B,SAAS,CAAEmC,KAAM,SAExBJ,KAAKZ,MAAMX,UAAUI,QAClB2B,WACCL,EAAO,GAAGW,KACVX,EAAO,GAAGS,KACVZ,KAAKZ,MAAMgB,KACXJ,KAAKZ,MAAMiB,KACXI,GAEDM,KAAK,CAAEC,KAAMhB,KAAKZ,MAAMlB,UACxB+C,GAAG,kBAAoBH,IACtBd,KAAK/B,SAAS,CACZ4C,SAAS,EACTT,KAAM,KACNC,KAAM,OAERtE,OAAOC,SAASkF,WAEjBD,GAAG,QAAUE,IACZpF,OAAO8B,MAAM,SACbmC,KAAK/B,SAAS,CAAE4C,SAAS,UAO/Bb,KAAKZ,MAAQ,CACXlB,QAAS,GACTO,UAAW,KACXS,MAAO,GACP2B,SAAS,EACTT,KAAM,KACNC,KAAM,MAERL,KAAKQ,WAAaR,KAAKQ,WAAWY,KAAKpB,MACvCA,KAAKR,YAAcQ,KAAKR,YAAY4B,KAAKpB,MAG3C5D,SACE,OACE,yBAAKiF,UAAU,oBACb,kBAAC,IAAD,CAAQnD,QAAS8B,KAAKZ,MAAMlB,UAC3B8B,KAAKZ,MAAMyB,QACV,yBAAKS,GAAG,SAASD,UAAU,oBACzB,0CAGF,kBAAC,IAAD,CACEnC,MAAOc,KAAKZ,MAAMF,MAClBM,YAAaQ,KAAKR,YAClBgB,WAAYR,KAAKQ,eAQdnE,Q,yDC3Jf,wDAIA,MAAMkF,UAAenE,YACnBhB,SACE,OACE,yBAAKiF,UAAU,yCACb,yBACEG,IAAKC,IACLC,MAAM,SACNL,UAAU,YACVM,IAAI,GACJC,MAAO,CAAEC,WAAY,GAAIC,YAAa,MAExC,wBAAIT,UAAU,mBACZ,4BACGrB,KAAKV,MAAMpB,QACV,yBACEyD,IAAI,KACJD,MAAM,KACNK,OAAO,KACPP,IAAG,gCAA2B,IAAIQ,IAChChC,KAAKV,MAAMpB,QACX,IACA+D,cAGJ,+BAEF,6BACA,2BAAOX,GAAG,WACR,uBACE3B,OAAO,SACPgC,IAAI,aACJN,UAAU,aACVa,IAAI,sBACJC,KAAM,gCAAkCnC,KAAKV,MAAMpB,SAElD8B,KAAKV,MAAMpB,QAAQkE,UAAU,EAAG,GAPnC,MAQGpC,KAAKV,MAAMpB,QAAQkE,UAAU,GAAI,UAUnCb,O,oBClDfc,EAAOC,QAAU,IAA0B,kC,kHCM3C,MAAMC,UAAanF,YACjBhB,SACE,OACE,yBAAKiF,UAAU,oCACb,kBAACmB,EAAA,EAAD,CACEC,OAAO,OACPb,MAAO,CACLF,MAAO,QACPgB,OAAQ,OACRC,gBAAiB,gBAGnB,kBAACH,EAAA,EAAKI,OAAN,CAAaC,GAAG,MAAhB,cACA,kBAACL,EAAA,EAAKM,KAAN,KACE,kBAACN,EAAA,EAAKO,MAAN,yBACA,0BACEC,SAAWvD,IACTA,EAAMC,iBACN,IAAMe,EAAcT,KAAKiD,gBAAgBC,MACzClD,KAAKV,MAAMkB,WAAWC,KAGxB,yBAAKY,UAAU,cACb,2BACEC,GAAG,kBACHlB,KAAK,OACL+C,IAAMC,IACJpD,KAAKiD,gBAAkBG,GAEzB/B,UAAU,eACVgC,YAAY,2BACZzB,MAAO,CAAEF,MAAO,QAASgB,OAAQ,QACjCY,UAAQ,KAGZ,6BACA,kBAACd,EAAA,EAAKe,KAAN,KACE,2BACEnD,KAAK,OACLoD,SAAUxD,KAAKV,MAAME,YACrB6B,UAAU,aACVO,MAAO,CAAEF,MAAO,QAASgB,OAAQ,WAGrC,6BACA,6BACA,kBAACe,EAAA,EAAD,CAAQC,QAAQ,UAAUtD,KAAK,UAA/B,kBAMN,6BACA,6BACA,6BACA,gDACA,6BACA,kBAACuD,EAAA,EAAD,CACEC,SAAO,EACPC,UAAQ,EACRC,OAAK,EACLJ,QAAQ,QACR9C,KAAK,KACLgB,MAAO,CAAEF,MAAO,QAASgB,OAAQ,SAEjC,+BACE,4BACE,kCACA,oCACA,2CACA,oCACA,oCACA,oCACA,6CACA,+CAGH1C,KAAKV,MAAMJ,MAAM6E,IAAI,CAAC5E,EAAM6E,IAEzB,2BAAOA,IAAKA,GACV,4BACE,4BAAK7E,EAAK8E,QACV,4BAAK9E,EAAK+E,UACV,4BAAK/E,EAAK8D,iBACV,4BAAK9D,EAAKgF,UACV,4BC3FX,SAAsBC,GAE1B,GAAc,IAAVA,EAAa,MAAO,SACxB,IAAInF,EAAIoF,SAASC,KAAKC,MAAMD,KAAK/D,IAAI6D,GAASE,KAAK/D,IAAI,QACvD,OAAO+D,KAAKE,MAAMJ,EAAQE,KAAKG,IAAI,KAAMxF,GAAI,GAAK,IAHtC,CAAC,QAAS,KAAM,KAAM,KAAM,MAGsBA,GDuF1CyF,CAAavF,EAAKwF,WACvB,4BACGC,IAAOC,KAAK1F,EAAK2F,YAAYC,OAAO,oBAEvC,4BACE,uBACE5C,KAAM,gCAAkChD,EAAK6F,SAC7C9C,IAAI,sBACJvC,OAAO,UAENR,EAAK6F,SAAS5C,UAAU,EAAG,IAL9B,QAQF,4BACE,uBACED,KAAM,+BAAiChD,EAAK8F,SAC5C/C,IAAI,sBACJvC,OAAO,UAENR,EAAK8F,SAAS7C,UAAU,EAAG,IAL9B,YAaZ,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BAMOG,O","file":"static/js/main.5bb57336.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import DeStorage from \"../abis/DeStorage.json\";\r\nimport React, { Component } from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport Main from \"./Main\";\r\nimport Web3 from \"web3\";\r\nimport \"./App.css\";\r\n\r\nconst ipfsClient = require(\"ipfs-http-client\");\r\nconst ipfs = ipfsClient({\r\n  host: \"ipfs.infura.io\",\r\n  port: 5001,\r\n  protocol: \"https\",\r\n}); // leaving out the arguments will default to these values\r\n\r\nclass App extends Component {\r\n  async componentWillMount() {\r\n    await this.loadWeb3();\r\n    await this.loadBlockchainData();\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum);\r\n      await window.ethereum.enable();\r\n    } else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider);\r\n    } else {\r\n      window.alert(\r\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n      );\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3;\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts();\r\n    this.setState({ account: accounts[0] });\r\n    // Network ID\r\n    const networkId = await web3.eth.net.getId();\r\n    const networkData = DeStorage.networks[networkId];\r\n    if (networkData) {\r\n      // Assign contract\r\n      const destorage = new web3.eth.Contract(\r\n        DeStorage.abi,\r\n        networkData.address\r\n      );\r\n      this.setState({ destorage });\r\n      // Get files amount\r\n      const filesCount = await destorage.methods.fileCount().call();\r\n      this.setState({ filesCount });\r\n      // Load files&sort by the newest\r\n      for (var i = filesCount; i >= 1; i--) {\r\n        const file = await destorage.methods.files(i).call();\r\n        this.setState({\r\n          files: [...this.state.files, file],\r\n        });\r\n      }\r\n    } else {\r\n      window.alert(\"DeStorage contract not deployed to detected network.\");\r\n    }\r\n  }\r\n\r\n  // Get file from user\r\n  captureFile = (event) => {\r\n    event.preventDefault();\r\n\r\n    const file = event.target.files[0];\r\n    const reader = new window.FileReader();\r\n\r\n    reader.readAsArrayBuffer(file);\r\n    reader.onloadend = () => {\r\n      this.setState({\r\n        buffer: Buffer(reader.result),\r\n        type: file.type,\r\n        name: file.name,\r\n      });\r\n      console.log(\"buffer\", this.state.buffer);\r\n    };\r\n  };\r\n\r\n  uploadFile = (description) => {\r\n    console.log(\"Submitting file to IPFS...\");\r\n\r\n    // Add file to the IPFS\r\n    ipfs.add(this.state.buffer, (error, result) => {\r\n      console.log(\"IPFS result\", result.size);\r\n      if (error) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n\r\n      this.setState({ loading: true });\r\n      // Assign value for the file without extension\r\n      if (this.state.type === \"\") {\r\n        this.setState({ type: \"none\" });\r\n      }\r\n      this.state.destorage.methods\r\n        .uploadFile(\r\n          result[0].hash,\r\n          result[0].size,\r\n          this.state.type,\r\n          this.state.name,\r\n          description\r\n        )\r\n        .send({ from: this.state.account })\r\n        .on(\"transactionHash\", (hash) => {\r\n          this.setState({\r\n            loading: false,\r\n            type: null,\r\n            name: null,\r\n          });\r\n          window.location.reload();\r\n        })\r\n        .on(\"error\", (e) => {\r\n          window.alert(\"Error\");\r\n          this.setState({ loading: false });\r\n        });\r\n    });\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      account: \"\",\r\n      destorage: null,\r\n      files: [],\r\n      loading: false,\r\n      type: null,\r\n      name: null,\r\n    };\r\n    this.uploadFile = this.uploadFile.bind(this);\r\n    this.captureFile = this.captureFile.bind(this);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"light-gradient-2\">\r\n        <Navbar account={this.state.account} />\r\n        {this.state.loading ? (\r\n          <div id=\"loader\" className=\"text-center mt-5\">\r\n            <p>Loading...</p>\r\n          </div>\r\n        ) : (\r\n          <Main\r\n            files={this.state.files}\r\n            captureFile={this.captureFile}\r\n            uploadFile={this.uploadFile}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from \"react\";\r\nimport Identicon from \"identicon.js\";\r\nimport logo from \"./logo.png\";\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-dark p-0 text-monospace\">\r\n        <img\r\n          src={logo}\r\n          width=\"300rem\"\r\n          className=\"align-top\"\r\n          alt=\"\"\r\n          style={{ paddingTop: 30, paddingLeft: 90 }}\r\n        />\r\n        <ul className=\"navbar-nav px-5\">\r\n          <li>\r\n            {this.props.account ? (\r\n              <img\r\n                alt=\"dp\"\r\n                width=\"40\"\r\n                height=\"40\"\r\n                src={`data:image/png;base64,${new Identicon(\r\n                  this.props.account,\r\n                  30\r\n                ).toString()}`}\r\n              />\r\n            ) : (\r\n              <span></span>\r\n            )}\r\n            <br />\r\n            <small id=\"account\">\r\n              <a\r\n                target=\"_blank\"\r\n                alt=\"account Id\"\r\n                className=\"text-white\"\r\n                rel=\"noopener noreferrer\"\r\n                href={\"https://etherscan.io/address/\" + this.props.account}\r\n              >\r\n                {this.props.account.substring(0, 6)}...\r\n                {this.props.account.substring(38, 42)}\r\n              </a>\r\n            </small>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.5753c502.png\";","import React, { Component } from \"react\";\r\nimport { convertBytes } from \"./helpers\";\r\nimport moment from \"moment\";\r\nimport \"../index.css\";\r\nimport { Button, Card, Table } from \"react-bootstrap/\";\r\n\r\nclass Main extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid mt-5 text-center\">\r\n        <Card\r\n          border=\"dark\"\r\n          style={{\r\n            width: \"80rem\",\r\n            margin: \"auto\",\r\n            backgroundColor: \"transparent\",\r\n          }}\r\n        >\r\n          <Card.Header as=\"h4\">Share File</Card.Header>\r\n          <Card.Body>\r\n            <Card.Title>Select Your File</Card.Title>\r\n            <form\r\n              onSubmit={(event) => {\r\n                event.preventDefault();\r\n                const description = this.fileDescription.value;\r\n                this.props.uploadFile(description);\r\n              }}\r\n            >\r\n              <div className=\"form-group\">\r\n                <input\r\n                  id=\"fileDescription\"\r\n                  type=\"text\"\r\n                  ref={(input) => {\r\n                    this.fileDescription = input;\r\n                  }}\r\n                  className=\"form-control\"\r\n                  placeholder=\"Your File Description...\"\r\n                  style={{ width: \"30rem\", margin: \"auto\" }}\r\n                  required\r\n                />\r\n              </div>\r\n              <br />\r\n              <Card.Text>\r\n                <input\r\n                  type=\"file\"\r\n                  onChange={this.props.captureFile}\r\n                  className=\"text-black\"\r\n                  style={{ width: \"30rem\", margin: \"auto\" }}\r\n                />\r\n              </Card.Text>\r\n              <br />\r\n              <br />\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                Upload File\r\n              </Button>\r\n            </form>\r\n          </Card.Body>\r\n        </Card>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <h3>Uploaded Files :</h3>\r\n        <br />\r\n        <Table\r\n          striped\r\n          bordered\r\n          hover\r\n          variant=\"light\"\r\n          size=\"md\"\r\n          style={{ width: \"80rem\", margin: \"auto\" }}\r\n        >\r\n          <thead>\r\n            <tr>\r\n              <th>Id</th>\r\n              <th>Name</th>\r\n              <th>Description</th>\r\n              <th>Type</th>\r\n              <th>Size</th>\r\n              <th>Date</th>\r\n              <th>Uploader/View</th>\r\n              <th>Hash/View/Get</th>\r\n            </tr>\r\n          </thead>\r\n          {this.props.files.map((file, key) => {\r\n            return (\r\n              <thead key={key}>\r\n                <tr>\r\n                  <td>{file.fileId}</td>\r\n                  <td>{file.fileName}</td>\r\n                  <td>{file.fileDescription}</td>\r\n                  <td>{file.fileType}</td>\r\n                  <td>{convertBytes(file.fileSize)}</td>\r\n                  <td>\r\n                    {moment.unix(file.uploadTime).format(\"h:mm:ss A M/D/Y\")}\r\n                  </td>\r\n                  <td>\r\n                    <a\r\n                      href={\"https://etherscan.io/address/\" + file.uploader}\r\n                      rel=\"noopener noreferrer\"\r\n                      target=\"_blank\"\r\n                    >\r\n                      {file.uploader.substring(0, 10)}...\r\n                    </a>\r\n                  </td>\r\n                  <td>\r\n                    <a\r\n                      href={\"https://ipfs.infura.io/ipfs/\" + file.fileHash}\r\n                      rel=\"noopener noreferrer\"\r\n                      target=\"_blank\"\r\n                    >\r\n                      {file.fileHash.substring(0, 10)}...\r\n                    </a>\r\n                  </td>\r\n                </tr>\r\n              </thead>\r\n            );\r\n          })}\r\n        </Table>\r\n        <p>&nbsp;</p>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","export function convertBytes(bytes) {\r\n   var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n   if (bytes === 0) return '0 Byte';\r\n   var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n   return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\r\n}"],"sourceRoot":""}